package gui;

import java.awt.Color;
import java.awt.Dimension;
import org.jfree.chart.ChartPanel;

import psicasso.aquaintance.DataSourceObservable;
import psicasso.aquaintance.Observable;
import psicasso.aquaintance.Observer;

import util.logging.DataSource;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PsicassoGUI.java
 *
 * Created on 23.06.2011, 14:11:05
 */
/**
 *
 * @author Mike Imhof
 */
public class PsicassoGUI extends javax.swing.JFrame implements Observer {
    
    private final static Dimension FRAME_SIZE = new Dimension(200, 120);
    private final static Dimension BUTTON_SIZE = new Dimension(111, 30);
    
    private final static Color PANEL_COLOR = new Color(153,255,51);
    private final static Color SUBPANEL_COLOR = new Color(255,255,102);
    
    private DataSource dataSource;
    private LineChart lineChart;
    
    private ChartPanel lineChartPanel;
    
    private StartButtonWorker startButtonWorker;
    
    
    /** Creates new form MainFrame */
    public PsicassoGUI() {
        init();
        initComponents();                    
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameMonitors = new javax.swing.JFrame();
        panelMonitorsUpper = new javax.swing.JPanel();
        panelCertainty = new javax.swing.JPanel();
        labelCertainty = new javax.swing.JLabel();
        panelCompetence = new javax.swing.JPanel();
        labelCompetence = new javax.swing.JLabel();
        panelMonitorsLower = new javax.swing.JPanel();
        panelMonitorsLowerL = new javax.swing.JPanel();
        buttonTestMemory = new javax.swing.JButton();
        frameTankChart = new javax.swing.JFrame();
        panelChart = new javax.swing.JPanel();
        panelMainUpper = new javax.swing.JPanel();
        panelbuttons = new javax.swing.JPanel();
        buttonStart = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        panelSimTime = new javax.swing.JPanel();
        labelSimTime = new javax.swing.JLabel();
        labelActualSimTime = new javax.swing.JLabel();
        menuMainFrame = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        itemClose = new javax.swing.JMenuItem();
        menuWindow = new javax.swing.JMenu();
        itemMonitors = new javax.swing.JMenuItem();
        itemTankChart = new javax.swing.JMenuItem();

        frameMonitors.setTitle("Monitors");
        frameMonitors.setMinimumSize(FRAME_SIZE);
        frameMonitors.setMaximumSize(FRAME_SIZE);
        frameMonitors.setPreferredSize(FRAME_SIZE);
        frameMonitors.setResizable(false);
        frameMonitors.setLocation(400,220);
        frameMonitors.getContentPane().setLayout(new java.awt.GridLayout(2, 1, 10, 10));

        panelMonitorsUpper.setBackground(PANEL_COLOR);
        panelMonitorsUpper.setLayout(new java.awt.GridLayout(1, 3, 10, 10));

        panelCertainty.setBackground(SUBPANEL_COLOR);
        panelCertainty.setLayout(new java.awt.GridLayout(1, 1));

        labelCertainty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCertainty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCertainty.setText(Double.toString(dataSource.getCertaintyDemand()));
        panelCertainty.add(labelCertainty);

        panelMonitorsUpper.add(panelCertainty);

        panelCompetence.setBackground(SUBPANEL_COLOR);
        panelCompetence.setLayout(new java.awt.GridLayout(1, 1));

        labelCompetence.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCompetence.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCompetence.setText(Double.toString(dataSource.getCompetenceDemand()));
        panelCompetence.add(labelCompetence);

        panelMonitorsUpper.add(panelCompetence);

        frameMonitors.getContentPane().add(panelMonitorsUpper);

        panelMonitorsLower.setBackground(PANEL_COLOR);
        panelMonitorsLower.setLayout(new java.awt.GridLayout(2, 1));

        panelMonitorsLowerL.setLayout(new java.awt.GridLayout(1, 0));

        buttonTestMemory.setText("Show Memory");
        buttonTestMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTestMemoryActionPerformed(evt);
            }
        });
        panelMonitorsLowerL.add(buttonTestMemory);

        panelMonitorsLower.add(panelMonitorsLowerL);

        frameMonitors.getContentPane().add(panelMonitorsLower);

        frameTankChart.setMinimumSize(FRAME_SIZE);
        frameTankChart.getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        panelChart = lineChartPanel;

        javax.swing.GroupLayout panelChartLayout = new javax.swing.GroupLayout(panelChart);
        panelChart.setLayout(panelChartLayout);
        panelChartLayout.setHorizontalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelChartLayout.setVerticalGroup(
            panelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        frameTankChart.getContentPane().add(panelChart);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PsiCasso Simulation");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(FRAME_SIZE);
        setName("frameMain"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        panelMainUpper.setBackground(new java.awt.Color(255, 204, 102));
        panelMainUpper.setPreferredSize(new java.awt.Dimension(60, 40));
        panelMainUpper.setLayout(new java.awt.GridLayout(2, 1));

        panelbuttons.setLayout(new java.awt.GridLayout(1, 2));

        buttonStart.setText("Start");
        buttonStart.setMaximumSize(BUTTON_SIZE);
        buttonStart.setMinimumSize(BUTTON_SIZE);
        buttonStart.setPreferredSize(BUTTON_SIZE);
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });
        panelbuttons.add(buttonStart);

        buttonStop.setText("Stop");
        buttonStop.setEnabled(false);
        buttonStop.setMaximumSize(BUTTON_SIZE);
        buttonStop.setMinimumSize(BUTTON_SIZE);
        buttonStop.setPreferredSize(BUTTON_SIZE);
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });
        panelbuttons.add(buttonStop);

        panelMainUpper.add(panelbuttons);

        panelSimTime.setLayout(new java.awt.GridLayout(1, 0));

        labelSimTime.setText("Time:");
        labelSimTime.setToolTipText("");
        labelSimTime.setMaximumSize(BUTTON_SIZE);
        labelSimTime.setMinimumSize(BUTTON_SIZE);
        panelSimTime.add(labelSimTime);
        panelSimTime.add(labelActualSimTime);

        panelMainUpper.add(panelSimTime);

        getContentPane().add(panelMainUpper);

        menuFile.setText("File");

        itemClose.setText("Close");
        itemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCloseActionPerformed(evt);
            }
        });
        menuFile.add(itemClose);

        menuMainFrame.add(menuFile);

        menuWindow.setText("Window");

        itemMonitors.setText("Monitors");
        itemMonitors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMonitorsActionPerformed(evt);
            }
        });
        menuWindow.add(itemMonitors);

        itemTankChart.setText("Tank History");
        itemTankChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTankChartActionPerformed(evt);
            }
        });
        menuWindow.add(itemTankChart);

        menuMainFrame.add(menuWindow);

        setJMenuBar(menuMainFrame);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        startButtonWorker.execute();
        buttonStop.setEnabled(true);
        buttonStart.setEnabled(false);
        
    }//GEN-LAST:event_buttonStartActionPerformed

    private void itemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCloseActionPerformed
        this.setVisible(false);
        frameMonitors.dispose();
        frameTankChart.dispose();
       
        this.dispose();
    }//GEN-LAST:event_itemCloseActionPerformed

    private void itemMonitorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMonitorsActionPerformed
        frameMonitors.setVisible(true);
        
}//GEN-LAST:event_itemMonitorsActionPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        startButtonWorker.getExperiment().stop();
        dataSource.writeAllRecordsToCsv();
        buttonStop.setEnabled(false);
    }//GEN-LAST:event_buttonStopActionPerformed

    private void buttonTestMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTestMemoryActionPerformed
        startButtonWorker.getExperiment().getAgent().getMemoryController().printMemoryContent();
    }//GEN-LAST:event_buttonTestMemoryActionPerformed

    private void itemTankChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTankChartActionPerformed
        frameTankChart.setVisible(true);
    }//GEN-LAST:event_itemTankChartActionPerformed

private void textComLeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textComLeakActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_textComLeakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                PsicassoGUI pGUI = new PsicassoGUI();
                pGUI.setSize(FRAME_SIZE);
                pGUI.setLocation(200,200);
                pGUI.setVisible(true);           
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStart;
    private javax.swing.JButton buttonStop;
    private javax.swing.JButton buttonTestMemory;
    private javax.swing.JFrame frameMonitors;
    private javax.swing.JFrame frameTankChart;
    private javax.swing.JMenuItem itemClose;
    private javax.swing.JMenuItem itemMonitors;
    private javax.swing.JMenuItem itemTankChart;
    private javax.swing.JLabel labelActualSimTime;
    private javax.swing.JLabel labelCertainty;
    private javax.swing.JLabel labelCompetence;
    private javax.swing.JLabel labelSimTime;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuBar menuMainFrame;
    private javax.swing.JMenu menuWindow;
    private javax.swing.JPanel panelCertainty;
    private javax.swing.JPanel panelChart;
    private javax.swing.JPanel panelCompetence;
    private javax.swing.JPanel panelMainUpper;
    private javax.swing.JPanel panelMonitorsLower;
    private javax.swing.JPanel panelMonitorsLowerL;
    private javax.swing.JPanel panelMonitorsUpper;
    private javax.swing.JPanel panelSimTime;
    private javax.swing.JPanel panelbuttons;
    // End of variables declaration//GEN-END:variables

    private void init(){              
        dataSource = new DataSource();
        lineChart = new LineChart();
        lineChartPanel = lineChart.getChartPanel();
                
        dataSource.addObserver(this);
        dataSource.addObserver(lineChart);
        startButtonWorker = new StartButtonWorker(dataSource);
    }
    
    @Override
    public void update(Observable o) {
    	DataSourceObservable dsobs = (DataSourceObservable) o;
    	
        labelCertainty.setText(Double.toString(dsobs.getCertaintyContent()));
        labelCompetence.setText(Double.toString(dsobs.getCompetenceContent()));
       
        labelActualSimTime.setText(String.valueOf(dataSource.getSimulationTime()));
        
    }
}
